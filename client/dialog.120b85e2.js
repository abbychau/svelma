import{S as t,i as e,s as n,c as o,a as s,e as r,t as a,j as c,f as i,b as l,g as p,h as m,d as f,k as $,n as u,m as h,l as d,o as g,p as w,r as y,B as D,_ as v,$ as E}from"./client.1c2121b8.js";import"./Code.cf3eb26d.js";import{D as b}from"./DocHeader.dc8df963.js";import{E as x}from"./Example.7287af40.js";import{J as j}from"./JSDoc.da2ff459.js";function k(t){let e;return{c(){e=a("Dialog")},l(t){e=m(t,"Dialog")},m(t,n){h(t,e,n)},d(t){t&&f(e)}}}function P(t){let e;return{c(){e=a("Confirm")},l(t){e=m(t,"Confirm")},m(t,n){h(t,e,n)},d(t){t&&f(e)}}}function B(t){let e;return{c(){e=a("Confirm (custom)")},l(t){e=m(t,"Confirm (custom)")},m(t,n){h(t,e,n)},d(t){t&&f(e)}}}function C(t){let e,n,a,m,v,E,b;return n=new D({props:{type:"is-primary",$$slots:{default:[k]},$$scope:{ctx:t}}}),n.$on("click",t[4]),m=new D({props:{type:"is-info",$$slots:{default:[P]},$$scope:{ctx:t}}}),m.$on("click",t[5]),E=new D({props:{type:"is-danger",$$slots:{default:[B]},$$scope:{ctx:t}}}),E.$on("click",t[6]),{c(){e=r("div"),o(n.$$.fragment),a=s(),o(m.$$.fragment),v=s(),o(E.$$.fragment),this.h()},l(t){e=l(t,"DIV",{slot:!0});var o=p(e);c(n.$$.fragment,o),a=i(o),c(m.$$.fragment,o),v=i(o),c(E.$$.fragment,o),o.forEach(f),this.h()},h(){$(e,"slot","preview")},m(t,o){h(t,e,o),u(n,e,null),d(e,a),u(m,e,null),d(e,v),u(E,e,null),b=!0},p(t,e){const o={};1024&e&&(o.$$scope={dirty:e,ctx:t}),n.$set(o);const s={};1024&e&&(s.$$scope={dirty:e,ctx:t}),m.$set(s);const r={};1024&e&&(r.$$scope={dirty:e,ctx:t}),E.$set(r)},i(t){b||(g(n.$$.fragment,t),g(m.$$.fragment,t),g(E.$$.fragment,t),b=!0)},o(t){w(n.$$.fragment,t),w(m.$$.fragment,t),w(E.$$.fragment,t),b=!1},d(t){t&&f(e),y(n),y(m),y(E)}}}function T(t){let e;return{c(){e=a("Prompt")},l(t){e=m(t,"Prompt")},m(t,n){h(t,e,n)},d(t){t&&f(e)}}}function I(t){let e;return{c(){e=a("Date Prompt")},l(t){e=m(t,"Date Prompt")},m(t,n){h(t,e,n)},d(t){t&&f(e)}}}function O(t){let e,n,a,m,v;return n=new D({props:{type:"is-primary",$$slots:{default:[T]},$$scope:{ctx:t}}}),n.$on("click",t[7]),m=new D({props:{type:"is-link",$$slots:{default:[I]},$$scope:{ctx:t}}}),m.$on("click",t[8]),{c(){e=r("div"),o(n.$$.fragment),a=s(),o(m.$$.fragment),this.h()},l(t){e=l(t,"DIV",{slot:!0});var o=p(e);c(n.$$.fragment,o),a=i(o),c(m.$$.fragment,o),o.forEach(f),this.h()},h(){$(e,"slot","preview")},m(t,o){h(t,e,o),u(n,e,null),d(e,a),u(m,e,null),v=!0},p(t,e){const o={};1024&e&&(o.$$scope={dirty:e,ctx:t}),n.$set(o);const s={};1024&e&&(s.$$scope={dirty:e,ctx:t}),m.$set(s)},i(t){v||(g(n.$$.fragment,t),g(m.$$.fragment,t),v=!0)},o(t){w(n.$$.fragment,t),w(m.$$.fragment,t),v=!1},d(t){t&&f(e),y(n),y(m)}}}function Y(t){let e,n,D,v,E,k,P,B,T,I,Y,H,U,q,A,S,W,J,V,R,_,z,F,G,K,L,M,N,Q,X,Z,tt,et,nt,ot,st,rt,at,ct,it,lt,pt,mt;return e=new b({props:{title:"Dialog",subtitle:"User alerts, promps, and confirmation dialogs"}}),_=new x({props:{code:"<script>\n  import { Button, Dialog, Toast } from 'svelma2'\n\n  function alert() {\n    Dialog.alert('Alles ist gut')\n  }\n\n  const thenHandler = result => Toast.create(`You ${result ? 'confirmed' : 'canceled'}`)\n\n  function confirm(type) {\n    switch(type) {\n      case 'custom':\n        return Dialog.confirm({\n          message: 'This is a custom confirmation message',\n          title: \"I'm a title!\",\n          type: 'is-danger',\n          icon: 'times-circle'\n        })\n        .then(thenHandler)\n      default:\n        Dialog.confirm('Shall we dance?')\n        .then(thenHandler)\n    }\n  }\n<\/script>\n\n<Button type=\"is-primary\" on:click={() => alert()}>Dialog</Button>\n<Button type=\"is-info\" on:click={() => confirm()}>Confirm</Button>\n<Button type=\"is-danger\" on:click={() => confirm('custom')}>Confirm (custom)</Button>\n",$$slots:{preview:[C]},$$scope:{ctx:t}}}),it=new x({props:{code:"<script>\n  import { Button, Dialog, Toast } from 'svelma2'\n\n  function prompt(opts) {\n    Dialog.prompt({\n      message: \"What is your quest?\",\n      ...opts\n    })\n    .then(prompt => Toast.create(`Your answer was: '${prompt}'`))\n  }\n<\/script>\n\n<Button type=\"is-primary\" on:click={() => prompt()}>Prompt</Button>\n<Button type=\"is-link\" on:click={() => prompt({ message: 'Which date?', inputProps: { type: 'date' }})}>Date Prompt</Button>",$$slots:{preview:[O]},$$scope:{ctx:t}}}),pt=new j({props:{jsdoc:t[0]}}),{c(){o(e.$$.fragment),n=s(),D=r("p"),v=a("Alert and Dialog"),E=s(),k=r("p"),P=a("Use "),B=r("code"),T=a("Dialog.alert()"),I=a(" and "),Y=r("code"),H=a("Dialog.confirm()"),U=a(" to create these kinds of dialogs.\nThe methods return a promise that is resolved when the user cancels or confirms the alert. If the use closes/cancels the\nvalue will be "),q=r("code"),A=a("false"),S=a(". If the user clicks the confirm button the value will be "),W=r("code"),J=a("true"),V=a(".\n\nThe first argument can either be an object of options or a string to use as the message."),R=s(),o(_.$$.fragment),z=s(),F=r("hr"),G=s(),K=r("p"),L=a("Prompt"),M=s(),N=r("p"),Q=a("Use "),X=r("code"),Z=a("Dialog.prompt()"),tt=a(" to programmatically create prompts for user input. By default the\ndialog will be created with a required text input. You can control the props (attributes) on the prompt with the\n"),et=r("code"),nt=a("inputProps"),ot=a(" prop.\n\n"),st=r("code"),rt=a("prompt()"),at=a(" returns a promise that will be resolved with the prompt input value if the user confirms, or null\nif they cancel/close."),ct=s(),o(it.$$.fragment),lt=s(),o(pt.$$.fragment),this.h()},l(t){c(e.$$.fragment,t),n=i(t),D=l(t,"P",{class:!0});var o=p(D);v=m(o,"Alert and Dialog"),o.forEach(f),E=i(t),k=l(t,"P",{class:!0});var s=p(k);P=m(s,"Use "),B=l(s,"CODE",{});var r=p(B);T=m(r,"Dialog.alert()"),r.forEach(f),I=m(s," and "),Y=l(s,"CODE",{});var a=p(Y);H=m(a,"Dialog.confirm()"),a.forEach(f),U=m(s," to create these kinds of dialogs.\nThe methods return a promise that is resolved when the user cancels or confirms the alert. If the use closes/cancels the\nvalue will be "),q=l(s,"CODE",{});var $=p(q);A=m($,"false"),$.forEach(f),S=m(s,". If the user clicks the confirm button the value will be "),W=l(s,"CODE",{});var u=p(W);J=m(u,"true"),u.forEach(f),V=m(s,".\n\nThe first argument can either be an object of options or a string to use as the message."),s.forEach(f),R=i(t),c(_.$$.fragment,t),z=i(t),F=l(t,"HR",{class:!0}),G=i(t),K=l(t,"P",{class:!0});var h=p(K);L=m(h,"Prompt"),h.forEach(f),M=i(t),N=l(t,"P",{class:!0});var d=p(N);Q=m(d,"Use "),X=l(d,"CODE",{});var g=p(X);Z=m(g,"Dialog.prompt()"),g.forEach(f),tt=m(d," to programmatically create prompts for user input. By default the\ndialog will be created with a required text input. You can control the props (attributes) on the prompt with the\n"),et=l(d,"CODE",{});var w=p(et);nt=m(w,"inputProps"),w.forEach(f),ot=m(d," prop.\n\n"),st=l(d,"CODE",{});var y=p(st);rt=m(y,"prompt()"),y.forEach(f),at=m(d," returns a promise that will be resolved with the prompt input value if the user confirms, or null\nif they cancel/close."),d.forEach(f),ct=i(t),c(it.$$.fragment,t),lt=i(t),c(pt.$$.fragment,t),this.h()},h(){$(D,"class","title is-4"),$(k,"class","content"),$(F,"class","is-medium"),$(K,"class","title is-4"),$(N,"class","content")},m(t,o){u(e,t,o),h(t,n,o),h(t,D,o),d(D,v),h(t,E,o),h(t,k,o),d(k,P),d(k,B),d(B,T),d(k,I),d(k,Y),d(Y,H),d(k,U),d(k,q),d(q,A),d(k,S),d(k,W),d(W,J),d(k,V),h(t,R,o),u(_,t,o),h(t,z,o),h(t,F,o),h(t,G,o),h(t,K,o),d(K,L),h(t,M,o),h(t,N,o),d(N,Q),d(N,X),d(X,Z),d(N,tt),d(N,et),d(et,nt),d(N,ot),d(N,st),d(st,rt),d(N,at),h(t,ct,o),u(it,t,o),h(t,lt,o),u(pt,t,o),mt=!0},p(t,[e]){const n={};1024&e&&(n.$$scope={dirty:e,ctx:t}),_.$set(n);const o={};1024&e&&(o.$$scope={dirty:e,ctx:t}),it.$set(o);const s={};1&e&&(s.jsdoc=t[0]),pt.$set(s)},i(t){mt||(g(e.$$.fragment,t),g(_.$$.fragment,t),g(it.$$.fragment,t),g(pt.$$.fragment,t),mt=!0)},o(t){w(e.$$.fragment,t),w(_.$$.fragment,t),w(it.$$.fragment,t),w(pt.$$.fragment,t),mt=!1},d(t){y(e,t),t&&f(n),t&&f(D),t&&f(E),t&&f(k),t&&f(R),y(_,t),t&&f(z),t&&f(F),t&&f(G),t&&f(K),t&&f(M),t&&f(N),t&&f(ct),y(it,t),t&&f(lt),y(pt,t)}}}async function H(){const t=await this.fetch("components/dialog.json");return{jsdoc:await t.json()}}function U(t,e,n){let{jsdoc:o}=e;function s(){v.alert("Alles ist gut")}const r=t=>E.create("You "+(t?"confirmed":"canceled"));function a(t){switch(t){case"custom":return v.confirm({message:"This is a custom confirmation message",title:"I'm a title!",type:"is-danger",icon:"times-circle"}).then(r);default:v.confirm("Shall we dance?").then(r)}}function c(t){v.prompt({message:"What is your quest?",...t}).then((t=>E.create(`Your answer was: '${t}'`)))}return t.$$set=t=>{"jsdoc"in t&&n(0,o=t.jsdoc)},[o,s,a,c,()=>s(),()=>a(),()=>a("custom"),()=>c(),()=>c({message:"Which date?",inputProps:{type:"date"}})]}export default class extends t{constructor(t){super(),e(this,t,U,Y,n,{jsdoc:0})}}export{H as preload};
